name: build-image

on:
  workflow_call:
    inputs:
      image_name:
        description: 'Image name'
        default: ${{ github.repository }}
        required: false
        type: string
      registry_username:
        description: 'Registry username'
        default: ${{ github.repository_owner }}
        required: false
        type: string
      tag_name:
        description: 'tag'
        default: latest
        required: false
        type: string
      target_arch:
        description: 'target arch. example: linux/amd64,linux/arm64'
        required: true
        type: string
    secrets:
      github-token:
        description: 'Registry password'
        required: false

jobs:
  info:
    runs-on: ubuntu-latest
    outputs:
      base_image: ${{ steps.base_image.outputs.value }}
      image_name: ${{ steps.image_name.outputs.value }}
      matrix_targets: ${{ steps.matrix_targets.outputs.value }}
    steps:
      - id: base_image
        run: echo "::set-output name=value::ghcr.io/${{ inputs.image_name }}:${{ inputs.tag_name }}"
      - name: view output
        run: echo "steps.base_image.outputs.value = ${{ steps.base_image.outputs.value }}"

      - id: image_name
        run: echo "::set-output name=value::${{ inputs.image_name }}"
      - name: view output
        run: echo "steps.image_name.outputs.value = ${{ steps.image_name.outputs.value }}"

      - id: matrix_targets
        run: |
          targets=$(echo ${{ inputs.target_arch }} | jq -sRc 'gsub("\n"; "")|split(",")')
          echo "::set-output name=value::$targets"

  build:
    runs-on: ubuntu-latest
    needs: info
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJSON(needs.info.outputs.matrix_targets) }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ inputs.registry_username }}
          password: ${{ secrets.github-token }}

      - run: echo "target_arch=$(echo ${{ matrix.target }} | awk -F/ '{print $NF}')" >> $GITHUB_ENV

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          platforms: ${{ matrix.target }}
          tags: |
            ${{ needs.info.outputs.base_image }}-${{ env.target_arch }}
  manifest:
    runs-on: ubuntu-latest
    needs:
      - build
      - info
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ inputs.registry_username }}
          password: ${{ secrets.github-token }}
      - name: create manifest
        env:
          FORCE_COLOR: 3
        run: |
          npx zx <<'EOF'
          const targetImageName = "${{ needs.info.outputs.base_image }}"
          console.log(`target image: ${targetImageName}`)
          const resp = await fetch(
            "https://ghcr.io/v2/${{ inputs.image_name }}/tags/list",
            {
              headers: {
                Authorization: `Bearer ${Buffer.from("${{ secrets.github-token }}").toString('base64')}`
              }
            }
          )
          const body = await resp.json()
          console.log(`body: ${body}`)
          const images = body.tags.map(t => `ghcr.io/${{ inputs.image_name }}:${t}` )
          console.log(`images: ${images}`)
          const each_arch_images = images.filter(i => i.includes(targetImageName) && i !== targetImageName)
          console.log(`each arch images ${each_arch_images}`)
          await $`docker manifest create ${targetImageName} ${each_arch_images}`
          await $`docker manifest push ${targetImageName}`
          if ("${{ inputs.tag_name }}" != "latest") {
            await $`docker manifest create ghcr.io/${{ inputs.image_name }}:latest ${each_arch_images}`
            await $`docker manifest push ghcr.io/${{ inputs.image_name }}:latest`
          }
          EOF
